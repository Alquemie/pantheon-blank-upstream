#!/bin/bash
RED='\033[0;31m'
NC='\033[0m' # No Color

set -e  #Die if any step fails
# BUILDPATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
BUILDPATH="$( pwd )";

###### Nothing to Change Here
HELP=0
CLEAN=0
GETDEPS=0
VERBOSE=0
QUITE="-q"
GIT_QUITE="--quiet"
TAR="-xzf"

while [ "$1" != "" ]; do
  case $1 in
    -c | --clean-composer )
			CLEAN=1
			;;
		-u | --update-composer )
			GETDEPS=1
			;;
		-v | --verbose )
			VERBOSE=1
			;;
		*)
			HELP=1
			;;
  esac
  shift
done

# If HELP then Display Message and exit
if [ $HELP == 1 ];
then
  echo "Usage: buildsite [OPTION]... ";
  echo "Backup, Build and Deploy WordPress Utilizing COMMAND LINE AND WP-CLI";
  echo "  -c, --clean-composer          Clear Local Composer Cache";
  echo "  -u, --update                  Update Project Dependancies";
  echo "  -v, --verbose                 Shows additonal information during build process";
  echo "  -h, --help                    Displays USAGE information";
	echo ""
	echo "Copyright 2018 by Chris Carrel (ccarrel@financeofamerica.com)";
	echo "";

	exit 1;
fi

if [ $VERBOSE == 1 ]; then
  QUITE="-v"
  TAR="-xzvf"
fi

## Check that Site has been Initialized
function initSite {
  echo "--> INITIALIZE Project Site";
  if [ ! -d "$BUILDPATH/app" ];
  then
    [ -f "master.tar.gz" ] && rm master.tar.gz
    curl -O -L "https://github.com/Alquemie/pantheon-wp/archive/master.tar.gz"
    tar $TAR master.tar.gz -C ./ --strip 1
    rm master.tar.gz

    GETDEPS=1
  fi
}

## Build Site in WEB directory
function buildSite {
	echo "--> Merging Project Files to WEB";
	rsync -aq --exclude ".git*" --exclude "composer.*" $BUILDPATH/app/ $BUILDPATH/web/
}

function cleanBuildLocation {

	if [ -d "$BUILDPATH/web/wp" ]; then
    echo "--> Cleaning WP directory";
    rm -rf $BUILDPATH/web/wp
  fi

	if [ -d "$BUILDPATH/web/wp-content" ]; then
    echo "--> Cleaning CONTENT directory";
    rm -rf $BUILDPATH/web/wp-content
  fi

  if [ -d "$BUILDPATH/web/vendor" ]; then
    echo "--> Cleaning VENDOR directory";
    rm -rf $BUILDPATH/vendor
  fi
}

## Composer Reset
function composerReset {
  echo "--> Resetting Project Dependencies";
  if [ -f "$BUILDPATH/composer-extra-assets.lock" ]; then
  	rm $BUILDPATH/composer-extra-assets.lock;
  fi

  if [ -f "$BUILDPATH/composer.lock" ]; then
  	rm $BUILDPATH/composer.lock
  fi

	echo "--> Clear Composer Cache";
	composer clear-cache
}

## Composer Update
function composerUpdate {
  echo "--> Updating Packages"
 	composer $QUITE update
}

## Composer Install
function composerInstall {
  echo "--> Installing Packages"
 	composer $QUITE install
}

echo "Building Site...";
initSite;

cleanBuildLocation;

if [ $CLEAN == 1 ];
then
   composerReset;
fi

if [ $GETDEPS == 1 ];
then
	composerUpdate;
else
  composerInstall;
fi

buildSite

echo "BUILD COMPLETED!"
echo "";
exit;
